#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf.ceda.ac.uk - 2023/05/16 23:14:19
# Search URL: https://esgf.ceda.ac.uk/esg-search/wget?distrib=false&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r3i1p1f3.Omon.zos.gn.v20200507|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r3i1p1f3.Omon.tos.gn.v20200507|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r2i1p1f3.Omon.zos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r2i1p1f3.Omon.tos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r1i1p1f3.Omon.zos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r1i1p1f3.Omon.tos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp126.r1i1p1f3.Omon.zos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp126.r1i1p1f3.Omon.tos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r4i1p1f3.Omon.zos.gn.v20201026|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r4i1p1f3.Omon.tos.gn.v20201026|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r4i1p1f3.Omon.zos.gn.v20200601|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r4i1p1f3.Omon.tos.gn.v20200601|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r3i1p1f3.Omon.zos.gn.v20200601|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r3i1p1f3.Omon.tos.gn.v20200601|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r2i1p1f3.Omon.zos.gn.v20191218|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r2i1p1f3.Omon.tos.gn.v20191218|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r1i1p1f3.Omon.zos.gn.v20191207|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r1i1p1f3.Omon.tos.gn.v20191207|esgf.ceda.ac.uk
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf.ceda.ac.uk/esg-search/wget?distrib=false&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r3i1p1f3.Omon.zos.gn.v20200507|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r3i1p1f3.Omon.tos.gn.v20200507|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r2i1p1f3.Omon.zos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r2i1p1f3.Omon.tos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r1i1p1f3.Omon.zos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r1i1p1f3.Omon.tos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp126.r1i1p1f3.Omon.zos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp126.r1i1p1f3.Omon.tos.gn.v20200515|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r4i1p1f3.Omon.zos.gn.v20201026|esgf.ceda.ac.uk&dataset_id=CMIP6.ScenarioMIP.MOHC.HadGEM3-GC31-MM.ssp585.r4i1p1f3.Omon.tos.gn.v20201026|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r4i1p1f3.Omon.zos.gn.v20200601|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r4i1p1f3.Omon.tos.gn.v20200601|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r3i1p1f3.Omon.zos.gn.v20200601|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r3i1p1f3.Omon.tos.gn.v20200601|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r2i1p1f3.Omon.zos.gn.v20191218|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r2i1p1f3.Omon.tos.gn.v20191218|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r1i1p1f3.Omon.zos.gn.v20191207|esgf.ceda.ac.uk&dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-MM.historical.r1i1p1f3.Omon.tos.gn.v20191207|esgf.ceda.ac.uk'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_185001-186912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/tos/gn/v20191207/tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_185001-186912.nc' 'SHA256' '74a714c667432f00458ed228d24a33326ce4b4d074c40dcdac329a90ecb680a6'
'tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_187001-188912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/tos/gn/v20191207/tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_187001-188912.nc' 'SHA256' 'da790ebf0896edc8c70978f0fba21dd2235e2d015fdeca13fdddd96d26efa734'
'tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_189001-190912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/tos/gn/v20191207/tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_189001-190912.nc' 'SHA256' '7fbc40f105f073b798c9dac25f0b7e0d6c8f5ce038f9023cccff3a3b0ba784eb'
'tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_191001-192912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/tos/gn/v20191207/tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_191001-192912.nc' 'SHA256' '231095b9901249f6ad5c44d98b9e61ef49392ebd0acc9c1fb6c2e2c0c49af929'
'tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_193001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/tos/gn/v20191207/tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_193001-194912.nc' 'SHA256' 'b9fb9804c1d9582f81951ae2fdd4a75fd3c0a09d252fd07eead4d3366eb159f1'
'tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_195001-196912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/tos/gn/v20191207/tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_195001-196912.nc' 'SHA256' 'abcd3f11b43c699f08c26013f22e096a9270182ac03d23128f0e697da93d3aca'
'tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_197001-198712.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/tos/gn/v20191207/tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_197001-198712.nc' 'SHA256' '7fb2d72ed89b50bef82167858b5a8673c80b8f4af0b599635978f4a3bd1e7e83'
'tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_198801-198912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/tos/gn/v20191207/tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_198801-198912.nc' 'SHA256' 'f861ee1fffc05435dbd8c747955b3b073d9e7202ee67c36162029ede55da2fff'
'tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_199001-200912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/tos/gn/v20191207/tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_199001-200912.nc' 'SHA256' 'e1dd8d54f092e7d370d7a941175a0affab40b37b5a97e12e4b4d8f58904882e9'
'tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_201001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/tos/gn/v20191207/tos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_201001-201412.nc' 'SHA256' '4d019c035ddef41f00432a57af4831a7b031cb818456ed497d0f44ad7c31dad8'
'zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_185001-186912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/zos/gn/v20191207/zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_185001-186912.nc' 'SHA256' '77addec9d2273b57d79e54ea90750c71ce99ce0ebeb9a9874ef01a8e87457dd3'
'zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_187001-188912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/zos/gn/v20191207/zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_187001-188912.nc' 'SHA256' '2cae3f2944da420eddc7fb1995e9149fb23861228bb1e28bdf1ad82c83ff2e2c'
'zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_189001-190912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/zos/gn/v20191207/zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_189001-190912.nc' 'SHA256' 'd0bd7e83a6804805f0bffad236403a1014eef4a0319a8327308052512a2b1e4f'
'zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_191001-192912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/zos/gn/v20191207/zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_191001-192912.nc' 'SHA256' 'a9283448f4b0c2be140d9cdef0eef08ab760c204423b24bfe55601b8a72e7812'
'zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_193001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/zos/gn/v20191207/zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_193001-194912.nc' 'SHA256' '3c498acf49e8710e620ce364ccb0b424bfd10af230958711a88a8bb676b7201a'
'zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_195001-196912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/zos/gn/v20191207/zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_195001-196912.nc' 'SHA256' '997f5c167b417d288a5da45418f5a2b611ac72c2f95e254b7b99f92b57420815'
'zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_197001-198712.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/zos/gn/v20191207/zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_197001-198712.nc' 'SHA256' '78330f37479b6c44173e765542896b67819eebabb91b2951a88bf65499cd3e9f'
'zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_198801-198912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/zos/gn/v20191207/zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_198801-198912.nc' 'SHA256' '999b6e5d1cda6e17af492c997aa01ac109fbc2f6c79b1bf6439ed2f611c8019f'
'zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_199001-200912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/zos/gn/v20191207/zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_199001-200912.nc' 'SHA256' '325dee6786b03712e7b9597ecea65c4d45c9e7c35e9f42cecc6c6b0c3932e9d1'
'zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_201001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r1i1p1f3/Omon/zos/gn/v20191207/zos_Omon_HadGEM3-GC31-MM_historical_r1i1p1f3_gn_201001-201412.nc' 'SHA256' 'f758faec2b809d706876839c0d4030d8f12d412f51550c9bef5d16f4e6ae3cba'
'tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_185001-186912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/tos/gn/v20191218/tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_185001-186912.nc' 'SHA256' '2b0032170fe1f25d5ec83faf561d48b7b8d5d03878012509a7183b7e3a1a71ea'
'tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_187001-188912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/tos/gn/v20191218/tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_187001-188912.nc' 'SHA256' 'f254ccf5a67c48d5e89a90ff8d672e16b049a84c20be83347a0c10d2c8378127'
'tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_189001-190912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/tos/gn/v20191218/tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_189001-190912.nc' 'SHA256' '308c96add2bfc8a2aae6ed4a03abcd77482cf35b520f8e650cf3e1f90271c453'
'tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_191001-192912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/tos/gn/v20191218/tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_191001-192912.nc' 'SHA256' 'b1c06bcf94d5764328826bd9c946790757939541ad1f04f7afe8264a935c4a56'
'tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_193001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/tos/gn/v20191218/tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_193001-194912.nc' 'SHA256' '974139aa80d719e0037d54746490b630ab8b05e7969fc28ce17a47588023a3b2'
'tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_195001-196912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/tos/gn/v20191218/tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_195001-196912.nc' 'SHA256' 'e6fb3eba0198507733fb5e42e771b1a52572f73aee46e9a486b20dd2e0486f55'
'tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_197001-198712.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/tos/gn/v20191218/tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_197001-198712.nc' 'SHA256' '7b375951e538f1dbe817d7a5dbbdafa7e01550e21024f60dee300306bcb4275e'
'tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_198801-198912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/tos/gn/v20191218/tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_198801-198912.nc' 'SHA256' '15fa2d08290c0523d79d772e5d4b4affdf401d263a32e6ea5a870a9c16e24116'
'tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_199001-200912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/tos/gn/v20191218/tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_199001-200912.nc' 'SHA256' 'd8807110249ddb5638e7c84e648267a78ef97eceabf3f7d889d4bd5cf45e18b4'
'tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_201001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/tos/gn/v20191218/tos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_201001-201412.nc' 'SHA256' '1d9bc3b2b0e2537aa429fafbc1efa48dab1408d45ea56f74623361eb84f29b82'
'zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_185001-186912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/zos/gn/v20191218/zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_185001-186912.nc' 'SHA256' '60a05dbc3baf2cd2b0cfad6e6c8cac9609c64c33473b278ca65fc60137878ef5'
'zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_187001-188912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/zos/gn/v20191218/zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_187001-188912.nc' 'SHA256' '446ba73aabbc66ede66d043cdd5bc889b9567fd2833ec8657eb21ba47d414ed4'
'zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_189001-190912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/zos/gn/v20191218/zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_189001-190912.nc' 'SHA256' '5bf3ff8cf0acccf5a1de3e5475b3de625a80cc0307a80b1fc71fb801a0cbaf2e'
'zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_191001-192912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/zos/gn/v20191218/zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_191001-192912.nc' 'SHA256' '9e212f316ac0eed8a2c850649248d242ef1bb0eca6dad599293585e0ac3c3847'
'zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_193001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/zos/gn/v20191218/zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_193001-194912.nc' 'SHA256' 'c0edcd300a7a92fef41897835fe73791121436f7e6143e7fc658fd51b8233c70'
'zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_195001-196912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/zos/gn/v20191218/zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_195001-196912.nc' 'SHA256' '02e8bc25b01346612c8432071271a4e09aba8384b6d68451d25259dbd7cec101'
'zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_197001-198712.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/zos/gn/v20191218/zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_197001-198712.nc' 'SHA256' 'b4b900ac98112d879a4f454a7ce3e80a439f6ea2c70eaf690cba376311b1a9f2'
'zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_198801-198912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/zos/gn/v20191218/zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_198801-198912.nc' 'SHA256' 'c1f2c6c35749a89ca42efd6238386003c6470880e9f2ec19653bf8d4aebd937b'
'zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_199001-200912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/zos/gn/v20191218/zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_199001-200912.nc' 'SHA256' 'd0ace22bedd737b118a8aba663e717d75bdbc24f82a6dcef3c99b4f7bb2615f3'
'zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_201001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r2i1p1f3/Omon/zos/gn/v20191218/zos_Omon_HadGEM3-GC31-MM_historical_r2i1p1f3_gn_201001-201412.nc' 'SHA256' '49d59820193e428f78b300d97ad0e790571f483486d237fbd80fe514c5998546'
'tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_185001-186912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_185001-186912.nc' 'SHA256' '45f1e3db438aab24e1e0d2d95533af2b70bf23fedd744937c27e0d6fea418735'
'tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_187001-188912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_187001-188912.nc' 'SHA256' '971f45353c3fcc3d41497db897e944ab3671a3588c6d930301f1935c97382e02'
'tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_189001-190912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_189001-190912.nc' 'SHA256' 'eef8618449a7fd22592f29ef0a0b20869425dd710b2151b90d7fb36798f8a24d'
'tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_191001-192912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_191001-192912.nc' 'SHA256' '28e956d3037dd15f15e2badff19cb49097d89dc032073c525c92f31913894336'
'tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_193001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_193001-194912.nc' 'SHA256' '141f9d53e575df5c569fa509762967bf04595d4345e40c873fdf30eefc9e5d46'
'tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_195001-196912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_195001-196912.nc' 'SHA256' 'b9418ffda6de3f4d5b6414f04670e8024c915c63ee093bc114ac62275f726a82'
'tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_197001-198712.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_197001-198712.nc' 'SHA256' 'eeb3db84b0fcd00bba6c9e521783967899d0668185bd7f14d568f6f86d0a7f25'
'tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_198801-198912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_198801-198912.nc' 'SHA256' '8f714e26b738435d30470fe11215a2e9c831d559562ae297e99dfa8a4985df1b'
'tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_199001-200912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_199001-200912.nc' 'SHA256' 'c66c736a8bbcfdd138f985c55eb91a4a34e8db390650612cbddf0314edb21196'
'tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_201001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_201001-201412.nc' 'SHA256' '1953b358267b8fa836e09ff040566cc81373d562089059ef1e971fbe3c332a8c'
'zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_185001-186912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_185001-186912.nc' 'SHA256' '3be4716fe2e3aac74ba3c56d68bcaa4c2591cfecd3043012716b37b995343687'
'zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_187001-188912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_187001-188912.nc' 'SHA256' '8ebf8e5145d4f485d6b0f8a3bbdc38cf376b2ba33ea8885080f16ece40c0e042'
'zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_189001-190912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_189001-190912.nc' 'SHA256' 'b4f05bf9f94f66ca4a2b392175ed8d435b99d78372d0a1f8fab02f0d92909613'
'zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_191001-192912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_191001-192912.nc' 'SHA256' '19c264080b7f4f0671e5c80b16fd7a925e8bea1fbee50daecee56dc519b3a231'
'zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_193001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_193001-194912.nc' 'SHA256' '58d4b6d58a7e337f4aef4df28e073d5bfc61bf7cea9f2e9e8196212f70ea5747'
'zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_195001-196912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_195001-196912.nc' 'SHA256' '66dbb0bf09b95b08770b6740a92ecb27070a8dc6fc1e10a2fb7094c1dbfeb372'
'zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_197001-198712.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_197001-198712.nc' 'SHA256' '4992ad8f80d640c1e17c264f16cbcbe328aea1cde385e4772f6760c01f3ded38'
'zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_198801-198912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_198801-198912.nc' 'SHA256' 'c5fa202af7cf740ba7bb4862cb3055f0f4bf408dede6dc4a2df06cfca9f73bdc'
'zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_199001-200912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_199001-200912.nc' 'SHA256' '8c22e5f1a148d617d5438f524ee55186b6248f471b00a182e07097b3c244701b'
'zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_201001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r3i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r3i1p1f3_gn_201001-201412.nc' 'SHA256' '9bdeaf86fa4106946ce0c29cfbd8ed2eb9f53d5892818f4e017715439dc390dc'
'tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_185001-186912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_185001-186912.nc' 'SHA256' 'e8df58b931c167132447f585b741022f23140704f3abfee1c7bb8be1e4f9658f'
'tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_187001-188912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_187001-188912.nc' 'SHA256' '9956ec12918dec869898f24269a6673f18ad8c8bd34bddf37479ceab16657bac'
'tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_189001-190912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_189001-190912.nc' 'SHA256' '9ff0982aa9c431821af3afed02f853ddc65bb0fee069c8abb5dd82725df81ca9'
'tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_191001-192912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_191001-192912.nc' 'SHA256' '2928b40a0b12d73673c5f5bcc0a99146eb45fbe85ae642676c9d0750ad092689'
'tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_193001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_193001-194912.nc' 'SHA256' '276603382a4627ba60a5af3c54614c602ec424623cbeeedd4b7e4db9c9c377f4'
'tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_195001-196912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_195001-196912.nc' 'SHA256' '7985fd88ca98e67d5b8b9b92bf79724fdf36ea4231f1648a5cddad9bb9ea8b8c'
'tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_197001-198712.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_197001-198712.nc' 'SHA256' 'bcb163e4c68f47d43e5c0950afd59327a4f62a5db0433e52c898306d3c287c5d'
'tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_198801-198912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_198801-198912.nc' 'SHA256' 'e9511c1c7d8e0d5b2499cf22d3b5c47e864db57841ac675ca1c3b4291d1a50af'
'tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_199001-200912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_199001-200912.nc' 'SHA256' '59bd5d83685b5eb3f4b19906f63bba32221422d9bda0dff586643e95db23d816'
'tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_201001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/tos/gn/v20200601/tos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_201001-201412.nc' 'SHA256' '7dc78c5e9b313322dc0514a80d8b4a88dd6ae193833aba853d4ed3e92130825b'
'zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_185001-186912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_185001-186912.nc' 'SHA256' 'd1fefe5f8af7d23aacfef8e1ba68f097dc46b5b196d7160aa6e8e2341f4b767b'
'zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_187001-188912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_187001-188912.nc' 'SHA256' 'df48803685b7f409b44a5acd792c641ef7ec09361a7c5761c0fc6762a2a3ed7e'
'zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_189001-190912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_189001-190912.nc' 'SHA256' '9680ac9cddd6d710a30d0b70886bf1b76ab23136bfcd321f385665c5702f401f'
'zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_191001-192912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_191001-192912.nc' 'SHA256' 'c07cd8e6346ec8234dc1d26037ef428bdbf65709c2e26aaa610132194f61f85d'
'zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_193001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_193001-194912.nc' 'SHA256' '290c33f2b902dabe29aa16e4230b018acccacd2d22d5b35f0865a18f6c7359d4'
'zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_195001-196912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_195001-196912.nc' 'SHA256' '510236ccd7ca440565eac0a006d97f2920d915ba40ad955e49a926ed7412e33d'
'zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_197001-198712.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_197001-198712.nc' 'SHA256' '3b7495f14e8dc9ca7e5877348537127d198e4cfbb42150ba95509fd386cdf461'
'zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_198801-198912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_198801-198912.nc' 'SHA256' '136211f5a077d51def1fe44ca7f8fce0f0a31ae77e171f67b60c71d14384740e'
'zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_199001-200912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_199001-200912.nc' 'SHA256' '51e28cfde6577112c56a3e158d863638e7e30f95e615a381b8cc29618782c4a7'
'zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_201001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-MM/historical/r4i1p1f3/Omon/zos/gn/v20200601/zos_Omon_HadGEM3-GC31-MM_historical_r4i1p1f3_gn_201001-201412.nc' 'SHA256' '5ac18693338f975268a2bea210c48e45f78baa645f5e0b13569260b95aec1a04'
'tos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_201501-202912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp126/r1i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_201501-202912.nc' 'SHA256' '742c0d992df0a71b03466a4f9ac4a2d9c68eeaa4b2b61f51c9e1b8133985866d'
'tos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_203001-204912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp126/r1i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_203001-204912.nc' 'SHA256' '93f59eedf16c9b1460c580c93fc35e751432bf7c55807b180f2b67f7dc950893'
'tos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_205001-206912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp126/r1i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_205001-206912.nc' 'SHA256' 'd5c27cd15d1603f097c5cd02bac8dd7b62439076883c33e277d9f5a9614ebafa'
'tos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_207001-208912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp126/r1i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_207001-208912.nc' 'SHA256' '0a23df6534239e21d2d32b408a56c334753ddb128aa6e587cb59e89046e25b7a'
'tos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_209001-210012.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp126/r1i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_209001-210012.nc' 'SHA256' '4593ca287c7412c9ea4be355b7c8089bb9e5217964a109959f91289184a44619'
'zos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_201501-202912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp126/r1i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_201501-202912.nc' 'SHA256' '080f1f2760ef8a20e54a088dbe3edceee72ea4ab608c97271c6026a6df846786'
'zos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_203001-204912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp126/r1i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_203001-204912.nc' 'SHA256' '0e6e156c4a476243ad0dc18c15f0e57959d1a6548af9b1999d24afff986a750c'
'zos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_205001-206912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp126/r1i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_205001-206912.nc' 'SHA256' 'fec414a8050a41c3327e967fb980245eefd9f1676f86432d12609ee51a0e46e7'
'zos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_207001-208912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp126/r1i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_207001-208912.nc' 'SHA256' '160fd640ffe56ddb207e42817ae013eb4562ccd519b4f37972ccdf82c22c9575'
'zos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_209001-210012.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp126/r1i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp126_r1i1p1f3_gn_209001-210012.nc' 'SHA256' '3eb7e3476724eba2e769c21ebbcfd9be0b8db65807f4d966a430ea8c6606abab'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_201501-202912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r1i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_201501-202912.nc' 'SHA256' '6224cd98b06e54326bf6e0e65046d3a13b72cff65513b3f6d7ce6ef377166984'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_203001-204912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r1i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_203001-204912.nc' 'SHA256' '12401d68136750d875bca9b577a202ba9963781a5d3ac2a8fbf4be01d1ca405a'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_205001-206912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r1i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_205001-206912.nc' 'SHA256' '51d9d36e90e0687aa36838b75ba91080ed13d4792310704bfad49c0288f2895c'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_207001-208912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r1i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_207001-208912.nc' 'SHA256' 'daf9484f6dc0fc504d005b2a17ea67a8a98c3710376e88b7acd0904eb2b547b7'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_209001-210012.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r1i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_209001-210012.nc' 'SHA256' '275b65029ec6b5ddbc58deda8547d5cfd4ed96f6d5f2baf83ee8043e2c8e8f22'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_201501-202912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r1i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_201501-202912.nc' 'SHA256' '9c322c49cf2c0a2ad515bf2541a4787a9786aa1e180625d537115d21ef8963c5'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_203001-204912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r1i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_203001-204912.nc' 'SHA256' '16eced3b32c6ce7bf1af7edcf6f99bcfb42c1718496d93d91a254c5923956416'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_205001-206912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r1i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_205001-206912.nc' 'SHA256' 'a93d56be54eec1a4aa431337f34a67789d5dabd634ddf9f089992d374f49a2d4'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_207001-208912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r1i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_207001-208912.nc' 'SHA256' '3951e3f18d4ad7322abb1302f54b23353b6643b8e005c0bc31df9f75a53b3c1f'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_209001-210012.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r1i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp585_r1i1p1f3_gn_209001-210012.nc' 'SHA256' '173920bd37cd462004a5f9bb24e86cdcbb7464ea103e62cd1970c6e390f91780'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_201501-202912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r2i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_201501-202912.nc' 'SHA256' 'a173d22bd7f0282b2ceb1da20d802f927965412555a005bc494e8718e16376b0'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_203001-204912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r2i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_203001-204912.nc' 'SHA256' '6b3b21dee492a014694e0d415efdedf92ccf9f02481cd8354f6524f1248cbc0d'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_205001-206912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r2i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_205001-206912.nc' 'SHA256' 'b70dfdfa45ff9e2d767f2a0d0e922c410f6f3dfc6da32ed29db6b5577ea6f755'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_207001-208912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r2i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_207001-208912.nc' 'SHA256' 'b627bab6075e52f40df8b3f3815bbf2a249664a17d637c8abcaa06029fba6164'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_209001-210012.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r2i1p1f3/Omon/tos/gn/v20200515/tos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_209001-210012.nc' 'SHA256' 'af5a57abfc903f6042244c5edaf0f62fea0b1be58fc6f0d7e960580f58696375'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_201501-202912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r2i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_201501-202912.nc' 'SHA256' '6370baa6c9494a884184d7d9cdcfd2b868620bc650167a7224c9cf727346d0da'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_203001-204912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r2i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_203001-204912.nc' 'SHA256' 'ee2abf4aceaf28580fb089762c64efcfa355a2212ad2be883011154321e412a6'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_205001-206912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r2i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_205001-206912.nc' 'SHA256' '8c8add99adff1bce425e3e1bf085bd0d523c13d41cb4c41982fb59c98425c121'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_207001-208912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r2i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_207001-208912.nc' 'SHA256' '2a331c7ef0407a73deb6cd14f5ddb2c426a2b9166815bbcc6d7e8f95329bfde6'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_209001-210012.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r2i1p1f3/Omon/zos/gn/v20200515/zos_Omon_HadGEM3-GC31-MM_ssp585_r2i1p1f3_gn_209001-210012.nc' 'SHA256' 'fb95506b5c3cf54acc4da610d5c82f461d9e25debd94247b36e9521976b3a695'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_201501-202912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r3i1p1f3/Omon/tos/gn/v20200507/tos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_201501-202912.nc' 'SHA256' '5d36a42ef74c0b29ff8ddfd28d08285cd2679a77d739040f3e6b8559990e7571'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_203001-204912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r3i1p1f3/Omon/tos/gn/v20200507/tos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_203001-204912.nc' 'SHA256' 'c1c485742a336ff859f1fc965316fe0fde7fcedc09b1240a85b52b49b411331e'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_205001-206912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r3i1p1f3/Omon/tos/gn/v20200507/tos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_205001-206912.nc' 'SHA256' '15da2c4cadc0136a0aec088ba58e01aa7e209ac92b4e176c39807a164849190f'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_207001-208912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r3i1p1f3/Omon/tos/gn/v20200507/tos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_207001-208912.nc' 'SHA256' 'bc6e0a67830d736b9aa578e98582c8169e61b067b586cf7dff1bd464bcf085f7'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_209001-210012.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r3i1p1f3/Omon/tos/gn/v20200507/tos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_209001-210012.nc' 'SHA256' '6785de529f49ab9d2bf851a1ed292d0342f97fc2296045f652e7354a7c588fca'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_201501-202912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r3i1p1f3/Omon/zos/gn/v20200507/zos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_201501-202912.nc' 'SHA256' '5ffeb4a825d3dbcaba268a0e7f6c2dd2966a4ecfbc57f9ef692a9d845fd4c331'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_203001-204912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r3i1p1f3/Omon/zos/gn/v20200507/zos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_203001-204912.nc' 'SHA256' 'ad816971110f71ba0a64439066067e13482bc0fc5107233409653e4a5ceca4d5'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_205001-206912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r3i1p1f3/Omon/zos/gn/v20200507/zos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_205001-206912.nc' 'SHA256' '9bb2e0252829beb2e5d7017d26535789d19e93240f850b021b592f47e7f3f5c9'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_207001-208912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r3i1p1f3/Omon/zos/gn/v20200507/zos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_207001-208912.nc' 'SHA256' 'a9763fb6cacb5e207d73089ac402c9220e995d47b70f248664724adf726990a2'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_209001-210012.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r3i1p1f3/Omon/zos/gn/v20200507/zos_Omon_HadGEM3-GC31-MM_ssp585_r3i1p1f3_gn_209001-210012.nc' 'SHA256' '28fd1b9e5d261aa8a9e7285db2cf9f5501492e4616f53903ec86d3e89117ba09'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_201501-202912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r4i1p1f3/Omon/tos/gn/v20201026/tos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_201501-202912.nc' 'SHA256' '9b9c3561caceca9c9da8e6a117f32fa5cc483fa3a6733cfc6e6b2b901adbb87e'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_203001-204912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r4i1p1f3/Omon/tos/gn/v20201026/tos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_203001-204912.nc' 'SHA256' '96e5e6a14fc529a94a15a32b619b82480f224339578d387a9551d3dc0db47c2b'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_205001-206912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r4i1p1f3/Omon/tos/gn/v20201026/tos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_205001-206912.nc' 'SHA256' 'ef05f771ac20de25c592133c5fa160495ff6c3c47c46a54bbb4a1292defe084b'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_207001-208912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r4i1p1f3/Omon/tos/gn/v20201026/tos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_207001-208912.nc' 'SHA256' '369b7888e2caa7b4011e12e6df7029282a20d29845029e99420df5c5ae01f3b6'
'tos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_209001-210012.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r4i1p1f3/Omon/tos/gn/v20201026/tos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_209001-210012.nc' 'SHA256' 'dc0b6611d1d0f773ee58d561950bb26472a49704614932ff2249b7ef59696c5a'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_201501-202912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r4i1p1f3/Omon/zos/gn/v20201026/zos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_201501-202912.nc' 'SHA256' 'cf94170b51eea270f04c8be463f15e70858bd5a22f8be2060e02af2fb6e9ad3c'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_203001-204912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r4i1p1f3/Omon/zos/gn/v20201026/zos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_203001-204912.nc' 'SHA256' '8321390205b0e9dd971d0b933348d8caeaf6053e15a59a6d97d341393e4c3bd3'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_205001-206912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r4i1p1f3/Omon/zos/gn/v20201026/zos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_205001-206912.nc' 'SHA256' '294cbf6607d7d3061b61b70d2e21f7eabf6f8387c3857ba9371a636cc33b1926'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_207001-208912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r4i1p1f3/Omon/zos/gn/v20201026/zos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_207001-208912.nc' 'SHA256' 'cc31299359c1c55bb687569d39771db53f5296791e3d1035c189dfaea05cd250'
'zos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_209001-210012.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/ScenarioMIP/MOHC/HadGEM3-GC31-MM/ssp585/r4i1p1f3/Omon/zos/gn/v20201026/zos_Omon_HadGEM3-GC31-MM_ssp585_r4i1p1f3_gn_209001-210012.nc' 'SHA256' '2d32c3f79e1a6d4d702542b61f33f7090db13b4e14540fcdcc154e1b3d2e72fb'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 130 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
